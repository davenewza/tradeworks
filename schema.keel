model Product {
    fields {
        name Text
        brand Brand
        sku Text @unique
        supplier Supplier
        costPrice Decimal
        freightIn Decimal
        prices ProductPrice[]
    }

    actions {
        get getProduct(id)
        create createProduct() with (name, brand.id, sku, supplier.id, costPrice, freightIn)
        list listProducts(name?, sku?, supplier.id?, brand.id?)
        update updateProduct(id) with (name, brand.id, sku, supplier.id, costPrice, freightIn)
        delete deleteProduct(id)
        write calculateRetailPrice(id, grossProfit: Number) returns (CalculatorResponse) {
            @permission(expression: ctx.isAuthenticated)
        }
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
}

model ProductPrice {
    fields {
        channel Channel
        description Text
        product Product
        totalCost Decimal
        grossProfitMargin Number
        grossProfit Decimal
        retailPrice Decimal
    }

    actions {
        get getProductPrice(id)
        create createProductPrice() with (channel.id, description, product.id, grossProfitMargin) {
            @function
        }
        list listProductPrices(product.id)
        delete deleteProductPrice(id)
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])

}

model Channel {
    fields {
        name Text @unique
    }

    actions {
        create createChannel() with (name)
        list listChannels()
        get getChannel(id)
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])

}

message CalculatorResponse {
    totalCost Decimal
    grossProfitPercentage Number
    grossProfit Decimal
    retailPrice Decimal
}

model Supplier {
    fields {
        name Text
        products Product[]
    }

    actions {
        create createSupplier() with (name)
        list listSuppliers()
        update updateSupplier(id) with (name)
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])

}


model Brand {
    fields {
        name Text
    }

    actions {
        create createBrand() with ( name)
        list listBrands()
        get getBrand(id)
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])

}
