model Product {
    fields {
        name Text
        image File?
        brand Brand
        sku Text @unique
        supplier Supplier
        costPrice Decimal
        freightIn Decimal
        prices ProductPrice[]
        fees ProductFee[]
        roasTargets AdRoasTarget[]
    }

    actions {
        get getProduct(id)
        create createProduct() with (name, image, brand.id, sku, supplier.id, costPrice, freightIn)
        list listProducts(name?, sku?, supplier.id?, brand.id?)
        update updateProduct(id) with (name?, image?, brand.id?, sku?, supplier.id?, costPrice?, freightIn?)
        
        delete deleteProduct(id)
    }

    @on([update], updateProductPrices)

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
}

model ProductPrice {
    fields {
        channel Channel
        description Text
        product Product @relation(prices)
        totalCost Decimal
        channelCost Decimal
        adSpend Decimal @default(0.0)
        grossProfitMargin Number
        grossProfit Decimal
        retailPrice Decimal
        isNormalSalesPrice Boolean
        discountFromNormalSalesPrice Decimal @default(0.0)

    }

    actions {
        get getProductPrice(id)
        create createProductPriceUsingGrossProfitMargin() with (channel.id, description, product.id, grossProfitMargin, isNormalSalesPrice) {
            @function
        }
        create createProductPriceUsingRetailPrice() with (channel.id, description, product.id, retailPrice, isNormalSalesPrice) {
            @function
        }
        update updateProductPriceUsingGrossProfitMargin(id) with (grossProfitMargin, isNormalSalesPrice) {
            @function
        }
        update updateProductPriceUsingRetailPrice(id) with (retailPrice, isNormalSalesPrice) {
            @function
        }
        list listProductPrices(product.id) {
            @orderBy(isNormalSalesPrice: desc)
        }
        delete deleteProductPrice(id) {
            @function
        }
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])

}

model Channel {
    fields {
        name Text @unique
        fees ChannelFee[]
    }

    actions {
        get getChannel(id)
        create createChannel() with (name)
        list listChannels()
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
}

model ProductFee {
    fields {
        product Product
        fee ChannelFee
    }

    actions {
        get productFee(id)
        create associateProductFee() with ( product.id, fee.id)
        list listChannelProductFees(product.id?) {
            @embed(fee)
        }
    }


    @unique([fee, product])
    @on([create], updateProductPrices)
    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
}
 
model ChannelFee {
    fields {
        name Text
        channel Channel
        flatFee Decimal?
        percFee Decimal?
    }

    actions {
        get getChannelFee(id)
        create createChannelFee() with (name, channel.id, flatFee?, percFee?)
        update updateChannelFee(id) with (name, flatFee?, percFee?)
        list listChannelFees(channel.id?)
        delete deleteChannelFee(id)
    }

    @on([update], updateProductPrices)
    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
}

model AdRoasTarget {
    fields {
        product Product
        channel Channel
        targetRoas Decimal
    }

    actions {
        get getAdRoasTarget(id)
        create createAdRoasTarget() with (product.id, channel.id, targetRoas)
        update updateAdRoasTarget(id) with (targetRoas)
        list listAdRoasTargets(product.id?)
        delete deleteAdRoasTarget(id)
    }

    @unique([product, channel])
    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])

}


model Supplier {
    fields {
        name Text
        products Product[]
    }

    actions {
        get getSupplier(id)
        create createSupplier() with (name)
        list listSuppliers()
        update updateSupplier(id) with (name)
        delete deleteSupplier(id)
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])

}


model Brand {
    fields {
        name Text
    }

    actions {
        get getBrand(id)
        create createBrand() with ( name)
        list listBrands()
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])

}

model Seeder {
    actions {
        write seed(Any) returns (Any)
    }
}