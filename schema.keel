model Product {
    fields {
        name Text
        brand Brand
        sku Text @unique
        supplier Supplier
        costPrice Decimal
        freightIn Decimal
        prices ProductPrice[]
        flatFees ProductFlatFee[]
        percentageFees ProductPercentageFee[]
    }

    actions {
        get getProduct(id)
        create createProduct() with (name, brand.id, sku, supplier.id, costPrice, freightIn)
        list listProducts(name?, sku?, supplier.id?, brand.id?)
        update updateProduct(id) with (name, brand.id, sku, supplier.id, costPrice, freightIn)
        
        delete deleteProduct(id)
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
}

model ProductPrice {
    fields {
        channel Channel
        description Text
        product Product @relation(prices)
        totalCost Decimal
        channelCost Decimal
        grossProfitMargin Number
        grossProfit Decimal
        retailPrice Decimal
        isNormalSalesPrice Boolean
        discountFromNormalSalesPrice Decimal @default(0.0)

    }

    actions {
        get getProductPrice(id)
        create createProductPriceUsingGrossProfitMargin() with (channel.id, description, product.id, grossProfitMargin, isNormalSalesPrice) {
            @function
        }
        create createProductPriceUsingRetailPrice() with (channel.id, description, product.id, retailPrice, isNormalSalesPrice) {
            @function
        }
        update updateProductPriceUsingGrossProfitMargin(id) with (grossProfitMargin, isNormalSalesPrice) {
            @function
        }
        update updateProductPriceUsingRetailPrice(id) with (retailPrice, isNormalSalesPrice) {
            @function
        }
        list listProductPrices(product.id) {
            @orderBy(isNormalSalesPrice: desc)
        }
        delete deleteProductPrice(id) {
            @function
        }
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])

}

model Channel {
    fields {
        name Text @unique
        flatFees ChannelFlatFee[]
        percentageFees ChannelPercentageFee[]
    }

    actions {
        create createChannel() with (name)
        list listChannels()
        get getChannel(id)
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])

}

model ProductFlatFee {
    fields {
        product Product
        fee ChannelFlatFee
    }

    actions {
        create associateProductFlatFee() with ( product.id, fee.id)
        list listChannelProductFlatFees(product.id?)
    }

    @unique([fee, product])
    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])

}

model ProductPercentageFee {
    fields {
        product Product
        fee ChannelPercentageFee
    }

    actions {
        create associateProductPercentageFee() with (product.id, fee.id)
        list listChannelProductFees(product.id)
    }

    @unique([fee, product])
    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])

}
 
model ChannelFlatFee {
    fields {
        name Text
        channel Channel
        flatFee Decimal
    }

    actions {
        get getChannelFlatFee(id)
        create createChannelFlatFee() with (name, channel.id, flatFee)
        update updateChannelFlatFee(id) with (name, flatFee)
        list listChannelFlatFees(channel.id?)
        delete deleteChannelFlatFee(id)
    }
    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])

}

model ChannelPercentageFee {
    fields {
        name Text
        channel Channel
        percentageFee Decimal
    }
    actions {
        get getChannelPercentageFee(id)
        create createChannelPercentageFee() with (name, channel.id, percentageFee)
        update updateChannelPercentageFee(id) with (name, percentageFee)
        list listChannelPercentageFees(channel.id?)
        delete deleteChannelPercentageFee(id)
    }
    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
}

message CalculatorResponse {
    totalCost Decimal
    grossProfitPercentage Number
    grossProfit Decimal
    retailPrice Decimal
}

model Supplier {
    fields {
        name Text
        products Product[]
    }

    actions {
        create createSupplier() with (name)
        list listSuppliers()
        update updateSupplier(id) with (name)
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])

}


model Brand {
    fields {
        name Text
    }

    actions {
        create createBrand() with ( name)
        list listBrands()
        get getBrand(id)
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])

}

model Seeder {
    actions {
        write seed(Any) returns (Any)
    }
}