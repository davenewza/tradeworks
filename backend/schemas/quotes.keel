model QuoteProduct {
    fields {
        quote Quote
        productPrice ProductPrice
        product Product @computed(quoteProduct.productPrice.product)
        quantity Number
        price Decimal @computed(quoteProduct.productPrice.price)
        priceInclVat Decimal @computed(quoteProduct.price * 1.15)
        total Decimal @computed(quoteProduct.price * quoteProduct.quantity)
        totalInclVat Decimal @computed(quoteProduct.total * 1.15)
        totalWeightInGrams Decimal @computed(quoteProduct.product.weightInGrams * quoteProduct.quantity)
    }

    actions {
        create createQuoteProduct() with (quote.id, productPrice.id, quantity) 
        list listQuoteProducts(quote.id)
        update updateQuoteProduct(id) with (quantity)
        delete deleteQuoteProduct(id)
    }
    @unique([quote, productPrice])

    @permission(expression: ctx.isAuthenticated && quoteProduct.quote.status == QuoteStatus.Draft, actions:[create,update, delete])
    @permission(expression: ctx.isAuthenticated, actions:[list])
}

model Quote {
    fields {
        name Text @default("")
        number Text @sequence(prefix: "Q")
        status QuoteStatus @default(QuoteStatus.Draft)
        customerPriceList CustomerPriceList
        products QuoteProduct[]
        boxType BoxType @default(BoxType.Cardboard)
        equipmentBoxes QuoteEquipmentBox[]
        totalProductPrice Decimal @computed(SUM(quote.products.total))
        totalEquipmentBoxPrice Decimal @computed(SUM(quote.equipmentBoxes.total))
       
        totalWeightInGrams Decimal @computed(SUM(quote.products.totalWeightInGrams) + SUM(quote.equipmentBoxes.totalWeightInGrams))
        
        deliveryService Text?
        totalDeliveryFees Decimal @default(0.0)
        deliveryAddress DeliveryAddress?
        chargedWeightInGrams Decimal?
        deliveryRawJson Text?

        total Decimal @computed(quote.totalProductPrice + quote.totalEquipmentBoxPrice + quote.totalDeliveryFees)
        totalInclVat Decimal @computed(quote.total * 1.15)
        vat Decimal @computed(quote.totalInclVat - quote.total)

        createdBy User? 
        submittedAt Timestamp?
        submittedBy User? 
        approvedAt Timestamp?
        approvedBy User? 
    }

    actions {
        create createQuote() with (customerPriceList.id) {
            @set(quote.name = "")
            @set(quote.createdBy = ctx.identity.user)
        }

        get getQuote(id)
        list listQuotes(customerPriceList.customer.id?, status?)
        list listDraftQuotes(customerPriceList.customer.id) {
            @where(quote.status == QuoteStatus.Draft)
        } 
        list listSubmittedQuotes(customerPriceList.customer.id) {
            @where(quote.status == QuoteStatus.Submitted)
        }
        list listApprovedQuotes(customerPriceList.customer.id) {
            @where(quote.status == QuoteStatus.Approved)
        }

        update updateQuoteName(id) with (name) {
            @permission(expression: ctx.isAuthenticated && quote.status == QuoteStatus.Draft)
        }
        update updateQuoteDeliveryAddress(id) with (deliveryAddress.id) {
            @permission(expression: ctx.isAuthenticated && quote.status == QuoteStatus.Draft)
        }
        update updateQuoteDelivery(id) with (deliveryService,totalDeliveryFees) {
            @permission(expression: ctx.isAuthenticated && quote.status == QuoteStatus.Draft)
        }
        update submitQuote(id) {
            @permission(expression: ctx.isAuthenticated && quote.status == QuoteStatus.Draft)
            @set(quote.status = QuoteStatus.Submitted)
            @set(quote.submittedAt = ctx.now)
            @set(quote.submittedBy = ctx.identity.user)
        }
        update approveQuote(id) {
            @permission(expression: ctx.isAuthenticated && quote.status == QuoteStatus.Submitted)
            @set(quote.status = QuoteStatus.Approved)
            @set(quote.approvedAt = ctx.now)
            @set(quote.approvedBy = ctx.identity.user)
        }
        write calculateEquipmentBoxes(id, boxType: BoxType) returns (Any) {
            @permission(expression: ctx.isAuthenticated)
        }
        write resetDeliveryInfo(id) returns (Any) {
            @permission(expression: ctx.isAuthenticated)
        }
        write calculateDelivery(id) returns (Any) {
            @permission(expression: ctx.isAuthenticated)
        }   
        delete deleteQuote(id) {
            @permission(expression: ctx.isAuthenticated && quote.status == QuoteStatus.Draft)
        }
    }

   
    @permission(expression: ctx.isAuthenticated, actions:[get, create, list])
}

enum QuoteStatus {
    Draft
    Submitted
    Approved
}

model QuoteEquipmentBox {
    fields {
        quote Quote
        equipmentBox EquipmentBox
        quantity Number
        price Decimal
        total Decimal @computed(quoteEquipmentBox.price * quoteEquipmentBox.quantity)
        totalInclVat Decimal @computed(quoteEquipmentBox.total * 1.15)
        totalWeightInGrams Decimal @computed(quoteEquipmentBox.equipmentBox.weightInGrams * quoteEquipmentBox.quantity)
    }

    actions {
        list listQuoteEquipmentBoxes(quote.id?)
    }

    @unique([quote, equipmentBox])

    @permission(expression: ctx.isAuthenticated && quoteEquipmentBox.quote.status == QuoteStatus.Draft, actions:[create,update, delete])
    @permission(expression: ctx.isAuthenticated, actions:[get, list])
}
