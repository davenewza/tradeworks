model User {
    fields {
        identity Identity @unique 
        email Text? @computed(user.identity.email)
        firstName Text?
        lastName Text?
        customer Customer?
    }
    actions {
        create createMe() {
            @set(user.identity = ctx.identity)
            @set(user.email = ctx.identity.email)
            @set(user.firstName = ctx.identity.givenName)
            @set(user.lastName = ctx.identity.familyName)
        }
        get getMe() {
            @where(user.identity == ctx.identity)
        }
        get getUser(id) 
        update updateName(id) with (firstName, lastName) 
        update assignToCustomer(id) with (customer.id) 
        list listUsers(customer.id?) 
    }
    @permission(expression: ctx.isAuthenticated, actions: [create, get, update, list])
}

model Customer {
    fields {
        name Text
        deliveryAddresses DeliveryAddress[]
        priceLists CustomerPriceList[]
    }

    actions {
        get getCustomer(id)
        create createCustomer() with (name)
        list listCustomers()
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update])
}

model CustomerPriceList {
    fields {
        customer Customer
        priceList PriceList
    }

    actions {
        create createCustomerPriceList() with (customer.id, priceList.id)
        list listCustomerPriceLists(customer.id)
        delete deleteCustomerPriceList(id)
    }

    @unique([customer, priceList])
    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, delete])
}

model DeliveryAddress {
    fields {
        customer Customer
        name Text
        organisation Text?
        addressLine1 Text
        addressLine2 Text @default("")
        suburb Text 
        city Text
        province Text
        postalCode Text
        country Text @default("South Africa")
        deliveryNotes Text @default("")

        contactPerson Text?
        contactPhone Text?
        contactEmail Text?

        isActive Boolean @default(true)
    }

    actions {
        get getDeliveryAddress(id)
        create createDeliveryAddress() with (customer.id, 
            organisation?, name, addressLine1, addressLine2?, 
            suburb, city, province, postalCode, deliveryNotes?,
            contactPerson?, contactPhone?, contactEmail?)
        list listDeliveryAddresses(customer.id) {
            @where(deliveryAddress.isActive == true)
        }
        // city, province, postalCode, country cannot be edited
        update updateDeliveryAddress(id) with (
            name, organisation, addressLine1, addressLine2?, 
            suburb?, deliveryNotes?, contactPerson?, 
            contactPhone?, contactEmail?)
        update deactivateDeliveryAddress(id) {
            @set(deliveryAddress.isActive = false)
        }
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
}