model Product {
    fields {
        name Text
        brand Brand
        sku Text @unique
        image File

        lengthInCm Decimal
        widthInCm Decimal
        heightInCm Decimal
        weightInGrams Decimal

        volumeInLitres Decimal @computed(product.lengthInCm * product.widthInCm * product.heightInCm / 1000)
    }

    actions {
        get getProduct(id)
        create createProduct() with (name, sku, image, brand.id, lengthInCm, widthInCm, heightInCm, weightInGrams)//, costPrice, freightIn)
        list listProducts(name?, sku?,  brand.id?)
        update updateProductDimensions(id) with (lengthInCm, widthInCm, heightInCm, weightInGrams)
        update updateProduct(id) with (name?,  brand.id?, sku?)//, costPrice?, freightIn?)
        delete deleteProduct(id)
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
}



model ProductPrice {
    fields {
        product Product
        productName Text @computed(productPrice.product.name)
        productSku Text @computed(productPrice.product.sku)
        priceList PriceList
        price Decimal @computed(productPrice.priceInclVat / 115 * 100)
        priceInclVat Decimal 
    }

    actions {
        get getProductPrice(id)
        create createProductPrice() with (product.id, priceList.id, priceInclVat)
        list listProductPrices(priceList.id)
        update updateProductPrice(id) with (priceInclVat)
        delete deleteProductPrice(id)
    }

    @unique([product, priceList])
    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
}

model PriceList {
    fields {
        name Text
        description Text? 
        numberOfProducts Number @computed(COUNT(priceList.products.id))
        products ProductPrice[]
    }

    actions {
        get getPriceList(id)
        create createPriceList() with (name, description?)
        list listPriceLists()
        update updatePriceList(id) with (name, description?)
        delete deletePriceList(id)
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
}




model QuoteProduct {
    fields {
        quote Quote
        productPrice ProductPrice
        product Product @computed(quoteProduct.productPrice.product)
        quantity Number
        price Decimal @computed(quoteProduct.productPrice.price)
        priceInclVat Decimal @computed(quoteProduct.price * 1.15)
        total Decimal @computed(quoteProduct.price * quoteProduct.quantity)
        totalInclVat Decimal @computed(quoteProduct.total * 1.15)
        totalWeightInGrams Decimal @computed(quoteProduct.product.weightInGrams * quoteProduct.quantity)
    }

    actions {
        create createQuoteProduct() with (quote.id, productPrice.id, quantity) 
        list listQuoteProducts(quote.id)
        update updateQuoteProduct(id) with (quantity)
        delete deleteQuoteProduct(id)
    }
    @unique([quote, productPrice])
    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
}


model Quote {
    fields {
        number Text @sequence(prefix: "Q")
        status QuoteStatus @default(QuoteStatus.Draft)
        customerPriceList CustomerPriceList
        products QuoteProduct[]
        boxType BoxType @default(BoxType.Cardboard)
        equipmentBoxes QuoteEquipmentBox[]
        totalProductPrice Decimal @computed(SUM(quote.products.total))
        totalEquipmentBoxPrice Decimal @computed(SUM(quote.equipmentBoxes.total))
       
        totalWeightInGrams Decimal @computed(SUM(quote.products.totalWeightInGrams) + SUM(quote.equipmentBoxes.totalWeightInGrams))
        
        deliveryService Text?
        totalDeliveryFees Decimal @default(0.0)
        deliveryAddress DeliveryAddress?
        chargedWeightInGrams Decimal?
        deliveryRawJson Text?

        total Decimal @computed(quote.totalProductPrice + quote.totalEquipmentBoxPrice + quote.totalDeliveryFees)
        totalInclVat Decimal @computed(quote.total * 1.15)
        vat Decimal @computed(quote.totalInclVat - quote.total)
        
    }

    actions {
        get getQuote(id)
        create createQuote() with (customerPriceList.id)
        list listQuotes(customerPriceList.customer.id?, status?)
        list listDraftQuotes(customerPriceList.customer.id) {
            @where(quote.status == QuoteStatus.Draft)
        } 
        list listSubmittedQuotes(customerPriceList.customer.id) {
            @where(quote.status == QuoteStatus.Submitted)
        }
        delete deleteQuote(id)
        update updateQuoteDeliveryAddress(id) with (deliveryAddress.id)
        update updateQuoteDelivery(id) with (deliveryService,totalDeliveryFees)
        update submitQuote(id) {
            @set(quote.status = QuoteStatus.Submitted)
        }
        write calculateEquipmentBoxes(id, boxType: BoxType) returns (Any) {
            @permission(expression: ctx.isAuthenticated)
        }
        write resetDeliveryInfo(id) returns (Any) {
            @permission(expression: ctx.isAuthenticated)
        }
        write calculateDelivery(id) returns (Any) {
            @permission(expression: ctx.isAuthenticated)
        }   
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, delete, update])
}

enum QuoteStatus {
    Draft
    Submitted
}

model QuoteEquipmentBox {
    fields {
        quote Quote
        equipmentBox EquipmentBox
        quantity Number
        price Decimal
        total Decimal @computed(quoteEquipmentBox.price * quoteEquipmentBox.quantity)
        totalInclVat Decimal @computed(quoteEquipmentBox.total * 1.15)
        totalWeightInGrams Decimal @computed(quoteEquipmentBox.equipmentBox.weightInGrams * quoteEquipmentBox.quantity)
    }

    actions {
        list listQuoteEquipmentBoxes(quote.id?)
    }

    @unique([quote, equipmentBox])
    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, delete])
}

model EquipmentBox {
    fields {
        name Text
        sku Text? 

        boxType BoxType 

        image File?

        price Decimal @computed(equipmentBox.priceInclVat / 115 * 100)
        priceInclVat Decimal 

        lengthInCm Decimal
        widthInCm Decimal
        heightInCm Decimal
        weightInGrams Decimal

        totalVolumeInLitres Decimal @computed(equipmentBox.lengthInCm * equipmentBox.widthInCm * equipmentBox.heightInCm / 1000)
        holdingVolumeInLitres Decimal @default(0.0)

        volumeUtilisationQuotient Decimal
        effectiveVolumeInLitres Decimal @computed(equipmentBox.holdingVolumeInLitres * equipmentBox.volumeUtilisationQuotient)
    }

    actions {
        get getEquipmentBox(id)
        create createEquipmentBox() with (name, sku, boxType,image?, priceInclVat, lengthInCm, widthInCm, heightInCm, weightInGrams, holdingVolumeInLitres, volumeUtilisationQuotient)
        list listEquipmentBoxes()
        update updateEquipmentBoxImage(id) with (image)
        update updateEquipmentBox(id) with (name, sku, priceInclVat, lengthInCm, widthInCm, heightInCm, weightInGrams, holdingVolumeInLitres, volumeUtilisationQuotient)
        delete deleteEquipmentBox(id)
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
}

enum BoxType {
    Cardboard
    PlasticEquipment
}

model Brand {
    fields {
        name Text
        logo File?
    }

    actions {
        get getBrand(id)
        create createBrand() with (name, logo?)
        list listBrands()
        update updateBrandLogo(id) with (logo)
    }

    @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
}

role Admin {
    domains {
        "keel.xyz"
        "tradeworks.co.za"
    }
}