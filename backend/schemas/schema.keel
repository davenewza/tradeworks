model Product {
    fields {
        name Text
        brand Brand
        sku Text @unique
        image File

        lengthInCm Decimal
        widthInCm Decimal
        heightInCm Decimal
        weightInGrams Decimal

        volumeInLitres Decimal @computed(product.lengthInCm * product.widthInCm * product.heightInCm / 1000)
    }

    actions {
        get getProduct(id)
        create createProduct() with (name, sku, image, brand.id, lengthInCm, widthInCm, heightInCm, weightInGrams)//, costPrice, freightIn)
        list listProducts(name?, sku?,  brand.id?)
        update updateProductDimensions(id) with (lengthInCm, widthInCm, heightInCm, weightInGrams)
        update updateProduct(id) with (name?,  brand.id?, sku?)//, costPrice?, freightIn?)
        delete deleteProduct(id)
    }

    @permission(expression: true, actions:[get, create, list, update, delete])
}



model ProductPrice {
    fields {
        product Product
        productName Text @computed(productPrice.product.name)
        productSku Text @computed(productPrice.product.sku)
        priceList PriceList
        price Decimal @computed(productPrice.priceInclVat / 115 * 100)
        priceInclVat Decimal 
    }

    actions {
        get getProductPrice(id)
        create createProductPrice() with (product.id, priceList.id, priceInclVat)
        list listProductPrices(priceList.id)
        update updateProductPrice(id) with (priceInclVat)
        delete deleteProductPrice(id)
    }

    @unique([product, priceList])

    @permission(expression: true, actions:[get, create, list, update, delete])
}

model PriceList {
    fields {
        name Text
        description Text?
        numberOfProducts Number @computed(COUNT(priceList.products.id))
        products ProductPrice[]
    }

    actions {
        get getPriceList(id)
        create createPriceList() with (name, description?)
        list listPriceLists()
        update updatePriceList(id) with (name, description?)
        delete deletePriceList(id)
    }

    @permission(expression: true, actions:[get, create, list, update, delete])
}

model Customer {
    fields {
        name Text
        priceLists CustomerPriceList[]
    }

    actions {
        get getCustomer(id)
        create createCustomer() with (name)
        list listCustomers()
        delete deleteCustomer(id)
    }

    @permission(expression: true, actions:[get, create, list, update, delete])
}

model CustomerPriceList {
    fields {
        customer Customer
        priceList PriceList
    }

    actions {
        create createCustomerPriceList() with (customer.id, priceList.id)
        list listCustomerPriceLists(customer.id?)
        delete deleteCustomerPriceList(id)
    }

    @unique([customer, priceList])
    @permission(expression: true, actions:[get, create, list, delete])
}

model QuoteProduct {
    fields {
        quote Quote
        productPrice ProductPrice
        product Product @computed(quoteProduct.productPrice.product)
        quantity Number
        price Decimal @computed(quoteProduct.productPrice.price)
        priceInclVat Decimal @computed(quoteProduct.price * 1.15)
        total Decimal @computed(quoteProduct.price * quoteProduct.quantity)
        totalInclVat Decimal @computed(quoteProduct.total * 1.15)
        totalWeightInGrams Decimal @computed(quoteProduct.product.weightInGrams * quoteProduct.quantity)
    }

    actions {
        create createQuoteProduct() with (quote.id, productPrice.id, quantity) 
        list listQuoteProducts(quote.id)
        update updateQuoteProduct(id) with (quantity)
        delete deleteQuoteProduct(id)
    }
    @unique([quote, productPrice])
    @permission(expression: true, actions:[get, create, list, update, delete])
}


model Quote {
    fields {
        number Text @sequence(prefix: "Q")
        status QuoteStatus @default(QuoteStatus.Draft)
        customerPriceList CustomerPriceList
        products QuoteProduct[]
        boxType BoxType @default(BoxType.Cardboard)
        equipmentBoxes QuoteEquipmentBox[]
        totalProductPrice Decimal @computed(SUM(quote.products.total))
        totalEquipmentBoxPrice Decimal @computed(SUM(quote.equipmentBoxes.total))
        total Decimal @computed(quote.totalProductPrice + quote.totalEquipmentBoxPrice + quote.totalDeliveryFees)
        totalInclVat Decimal @computed(quote.total * 1.15)
        vat Decimal @computed(quote.totalInclVat - quote.total)
        totalWeightInGrams Decimal @computed(SUM(quote.products.totalWeightInGrams) + SUM(quote.equipmentBoxes.totalWeightInGrams))
        deliveryService Text?
        totalDeliveryFees Decimal @default(0.0)
        
    }

    actions {
        get getQuote(id)
        create createQuote() with (customerPriceList.id)
        list listQuotes(customerPriceList.customer.id?)
        delete deleteQuote(id)
        update updateQuoteDelivery(id) with (deliveryService,totalDeliveryFees)
        update submitQuote(id) {
            @set(quote.status = QuoteStatus.Submitted)
        }
        write calculateEquipmentBoxes(id, boxType: BoxType) returns (Any) {
            @permission(expression: true)
        }
        write resetDeliveryInfo(id) returns (Any) {
            @permission(expression: true)
        }
        write calculateDelivery(id) returns (Any) {
            @permission(expression: true)
        }   
    }

    @permission(expression: true, actions:[get, create, list, delete, update])
}

enum QuoteStatus {
    Draft
    Submitted
}

model QuoteEquipmentBox {
    fields {
        quote Quote
        equipmentBox EquipmentBox
        quantity Number
        price Decimal
        total Decimal @computed(quoteEquipmentBox.price * quoteEquipmentBox.quantity)
        totalInclVat Decimal @computed(quoteEquipmentBox.total * 1.15)
        totalWeightInGrams Decimal @computed(quoteEquipmentBox.equipmentBox.weightInGrams * quoteEquipmentBox.quantity)
    }

    actions {
        list listQuoteEquipmentBoxes(quote.id?)
    }

    @unique([quote, equipmentBox])
    @permission(expression: true, actions:[get, create, list, delete])
}

model EquipmentBox {
    fields {
        name Text
        sku Text? 

        boxType BoxType 

        image File?

        price Decimal 
        priceInclVat Decimal @computed(equipmentBox.price * 1.15)

        lengthInCm Decimal
        widthInCm Decimal
        heightInCm Decimal
        weightInGrams Decimal

        totalVolumeInLitres Decimal @computed(equipmentBox.lengthInCm * equipmentBox.widthInCm * equipmentBox.heightInCm / 1000)
        holdingVolumeInLitres Decimal @default(0.0)

        volumeUtilisationQuotient Decimal
        effectiveVolumeInLitres Decimal @computed(equipmentBox.holdingVolumeInLitres * equipmentBox.volumeUtilisationQuotient)
    }

    actions {
        get getEquipmentBox(id)
        create createEquipmentBox() with (name, sku, boxType,image?,price, lengthInCm, widthInCm, heightInCm, weightInGrams, holdingVolumeInLitres, volumeUtilisationQuotient)
        list listEquipmentBoxes()
        update updateEquipmentBoxImage(id) with (image)
        update updateEquipmentBox(id) with (name, lengthInCm, widthInCm, heightInCm, weightInGrams, holdingVolumeInLitres, volumeUtilisationQuotient)
        delete deleteEquipmentBox(id)
    }

    @permission(expression: true, actions:[get, create, list, update, delete])
}

enum BoxType {
    Cardboard
    PlasticEquipment
}

// model ProductDimensions {
//     fields {
//         product Product @unique
//         lengthInCm Decimal
//         widthInCm Decimal
//         heightInCm Decimal
//         volume Decimal @computed(productDimensions.lengthInCm * productDimensions.widthInCm * productDimensions.heightInCm)
//     }
//     actions {
//         get getDimensions(id)
//         create createDimensions() with (product.id,lengthInCm, widthInCm, heightInCm)
//         update updateDimensions(id) with (lengthInCm, widthInCm, heightInCm)
//         delete deleteDimensions(id)
//     }

//     @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
// }



// model ProductPrice {
//     fields {
//         channel Channel
//         description Text
//         product Product @relation(prices)
//         totalCost Decimal
//         channelCost Decimal
//         adSpend Decimal @default(0.0)
//         grossProfitMargin Number
//         grossProfit Decimal
//         retailPrice Decimal
//         isNormalSalesPrice Boolean
//         discountFromNormalSalesPrice Decimal @default(0.0)
//     }

//     actions {
//         get getProductPrice(id)
//         create createProductPriceUsingGrossProfitMargin() with (channel.id, description, product.id, grossProfitMargin, isNormalSalesPrice) {
//             @function
//         }
//         create createProductPriceUsingRetailPrice() with (channel.id, description, product.id, retailPrice, isNormalSalesPrice) {
//             @function
//         }
//         update updateProductPriceUsingGrossProfitMargin(id) with (grossProfitMargin, isNormalSalesPrice) {
//             @function
//         }
//         update updateProductPriceUsingRetailPrice(id) with (retailPrice, isNormalSalesPrice) {
//             @function
//         }
//         list listProductPrices(product.id) {
//             @orderBy(isNormalSalesPrice: desc)
//         }
//         delete deleteProductPrice(id) {
//             @function
//         }
//     }

//     @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
// }

// model Channel {
//     fields {
//         name Text @unique
//         fees ChannelFee[]
//     }

//     actions {
//         get getChannel(id)
//         create createChannel() with (name)
//         list listChannels()
//     }

//     @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
// }

// model ProductFee {
//     fields {
//         product Product
//         fee ChannelFee
//     }

//     actions {
//         get productFee(id)
//         create associateProductFee() with ( product.id, fee.id)
//         list listChannelProductFees(product.id?) {
//             @embed(fee)
//         }
//         delete deleteProductFee(id)
//     }


//     @unique([fee, product])
//     @on([create, update, delete], updateProductPrices)
//     @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
// }
 
// model ChannelFee {
//     fields {
//         name Text
//         channel Channel
//         flatFee Decimal?
//         percFee Decimal?
//     }

//     actions {
//         get getChannelFee(id)
//         create createChannelFee() with (name, channel.id, flatFee?, percFee?)
//         update updateChannelFee(id) with (name, flatFee?, percFee?)
//         list listFlatChannelFees(channel.id?) {
//             @where(channelFee.flatFee != null)
//         }
//         list listPercentageChannelFees(channel.id?) {
//             @where(channelFee.percFee != null)
//         }
//         delete deleteChannelFee(id)
//     }

//     @on([create, update, delete], updateProductPrices)
//     @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
// }

// model AdRoasTarget {
//     fields {
//         product Product
//         channel Channel
//         targetRoas Decimal
//     }

//     actions {
//         get getAdRoasTarget(id)
//         create createAdRoasTarget() with (product.id, channel.id, targetRoas)
//         update updateAdRoasTarget(id) with (targetRoas)
//         list listAdRoasTargets(product.id?)
//         delete deleteAdRoasTarget(id)
//     }

//     @unique([product, channel])
//     @on([create, update, delete], updateProductPrices)
//     @permission(expression: ctx.isAuthenticated, actions:[get, create, list, update, delete])
// }


// model Supplier {
//     fields {
//         name Text
//         products Product[]
//     }

//     actions {
//         get getSupplier(id)
//         create createSupplier() with (name)
//         list listSuppliers()
//         update updateSupplier(id) with (name)
//         delete deleteSupplier(id)
//     }

//     @permission(expression: true, actions:[get, create, list, update, delete])

// }


model Brand {
    fields {
        name Text
    }

    actions {
        get getBrand(id)
        create createBrand() with ( name)
        list listBrands()
    }

    @permission(expression: true, actions:[get, create, list, update, delete])
}

model Seeder {
    actions {
        write seed(Any) returns (Any)
    }
}



role Admin {
    domains {
        "keel.xyz"
        "tradeworks.co.za"
    }
}