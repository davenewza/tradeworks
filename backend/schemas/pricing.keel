model PriceList {
    fields {
        name Text
        description Text?
        numberOfProducts Number @computed(COUNT(priceList.products.id))
        products ProductPrice[]
    }

    actions {
        get getPriceList(id)
        create createPriceList() with (name, description?)
        list listPriceLists()
        update updatePriceList(id) with (name, description?)
        delete deletePriceList(id)
    }

    @on(
        [create, update],
        pricelistUpdate
    )

    @permission(
        expression: ctx.isAuthenticated,
        actions: [get, create, list, update, delete]
    )
}

model ProductPrice {
    fields {
        product Product
        productName Text @computed(productPrice.product.name)
        productSku Text @computed(productPrice.product.sku)
        priceList PriceList
        price Decimal @computed(productPrice.priceInclVat / 115 * 100)
        priceInclVat Decimal
    }

    actions {
        get getProductPrice(id) {
            @embed(product)
        }
        create createProductPrice() with (product.id, priceList.id, priceInclVat)
        list listProductPrices(priceList.id) {
            @embed(product)
        }
        update updateProductPrice(id) with (priceInclVat)
        delete deleteProductPrice(id)
    }

    @on(
        [create, update, delete],
        pricelistUpdate
    )

    @unique([product, priceList])

    @permission(
        expression: ctx.isAuthenticated,
        actions: [get, create, list, update, delete]
    )
}

model PriceListChangeLog {
    fields {
        priceList PriceList
        description Text
        user User
    }

    actions {
        list listPriceListChangeLog(priceList.id) {
            @permission(expression: ctx.isAuthenticated)
        }
    }
}
